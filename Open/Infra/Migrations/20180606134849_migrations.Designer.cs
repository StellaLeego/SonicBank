// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Open.Core;
using Open.Infra;
using System;

namespace Open.Infra.Migrations
{
    [DbContext(typeof(SentryDbContext))]
    [Migration("20180606134849_migrations")]
    partial class migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Open.Data.Location.AddressDbRecord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CityOrAreaCode");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("RegionOrStateOrCountryCode");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.Property<string>("ZipOrPostCodeOrExtension");

                    b.HasKey("ID");

                    b.ToTable("Address");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AddressDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.CountryDbRecord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Open.Data.Location.TelecomDeviceRegistrationDbRecord", b =>
                {
                    b.Property<string>("AddressID");

                    b.Property<string>("DeviceID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("AddressID", "DeviceID");

                    b.HasIndex("DeviceID");

                    b.ToTable("TelecomDeviceRegistration");
                });

            modelBuilder.Entity("Open.Data.Money.CountryCurrencyDbRecord", b =>
                {
                    b.Property<string>("CountryID");

                    b.Property<string>("CurrencyID");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("CountryID", "CurrencyID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("CountryCurrency");
                });

            modelBuilder.Entity("Open.Data.Money.CurrencyDbRecord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Open.Data.Project.PaymentDbRecord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("Currency");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Memo");

                    b.Property<string>("Payee");

                    b.Property<string>("PayeeAccountNumber");

                    b.Property<string>("Payer");

                    b.Property<string>("PayerAccountNumber");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("ID");

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PaymentDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.EmailAddressDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Location.AddressDbRecord");


                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("EmailAddressDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.GeographicAddressDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Location.AddressDbRecord");

                    b.Property<string>("CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("GeographicAddressDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.TelecomAddressDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Location.AddressDbRecord");

                    b.Property<int>("Device");

                    b.Property<string>("NationalDirectDialingPrefix");

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("TelecomAddressDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.WebPageAddressDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Location.AddressDbRecord");


                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("WebPageAddressDbRecord");
                });

            modelBuilder.Entity("Open.Data.Project.CashDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Project.PaymentDbRecord");


                    b.ToTable("Payments");

                    b.HasDiscriminator().HasValue("CashDbRecord");
                });

            modelBuilder.Entity("Open.Data.Project.CheckDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Project.PaymentDbRecord");

                    b.Property<string>("CheckNumber");

                    b.ToTable("Payments");

                    b.HasDiscriminator().HasValue("CheckDbRecord");
                });

            modelBuilder.Entity("Open.Data.Project.PaymentCardDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Project.PaymentDbRecord");

                    b.Property<string>("CardAssociationName");

                    b.Property<string>("CardNumber");

                    b.Property<string>("DailyWithDrawalLimit");

                    b.ToTable("Payments");

                    b.HasDiscriminator().HasValue("PaymentCardDbRecord");
                });

            modelBuilder.Entity("Open.Data.Project.CreditCardDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Project.PaymentCardDbRecord");

                    b.Property<string>("CreditLimit");

                    b.ToTable("Payments");

                    b.HasDiscriminator().HasValue("CreditCardDbRecord");
                });

            modelBuilder.Entity("Open.Data.Project.DebitCardDbRecord", b =>
                {
                    b.HasBaseType("Open.Data.Project.PaymentCardDbRecord");


                    b.ToTable("Payments");

                    b.HasDiscriminator().HasValue("DebitCardDbRecord");
                });

            modelBuilder.Entity("Open.Data.Location.TelecomDeviceRegistrationDbRecord", b =>
                {
                    b.HasOne("Open.Data.Location.GeographicAddressDbRecord", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Location.TelecomAddressDbRecord", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Money.CountryCurrencyDbRecord", b =>
                {
                    b.HasOne("Open.Data.Location.CountryDbRecord", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Open.Data.Money.CurrencyDbRecord", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Open.Data.Location.GeographicAddressDbRecord", b =>
                {
                    b.HasOne("Open.Data.Location.CountryDbRecord", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
